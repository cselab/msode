#pragma once

#include <msode/core/types.h>

#include <memory>
#include <random>
#include <vector>

namespace msode {
namespace rl {

/** Class to draw an initial position randomly in the state space
 */
class EnvPosIC
{
public:
    EnvPosIC();
    virtual ~EnvPosIC();

    /// \return a copy of the object, with the correct type
    virtual std::unique_ptr<EnvPosIC> clone() const = 0;
    
    virtual real3 getLowestPosition()  const = 0; ///< \return the lowest possible coordinates generated by the sampler
    virtual real3 getHighestPosition() const = 0; ///< \return the highest possible coordinates generated by the sampler
    virtual real computeMaxDistanceToTarget() const = 0; ///< \return Th maximum distance to the target of one sampled position

    /** \brief Update the internal state according to the success of the previous simulation.
        This allows to create curriculum-like ICs
     */
    virtual void update(bool succesfulTry);

    /** \brief generate new positions in the current space
        \param gen rng
        \param n Number of positions to generate; must be alwasy the same between two calls
        \return \p n positions in the space
     */
    virtual std::vector<real3> generateNewPositions(std::mt19937& gen, int n) = 0;

    /** \brief generate positions uniformly in the whole spanned space
        \param gen rng
        \param n Number of positions to generate
        \return \p n positions in the space

        This is used to estimate the maximum distances and maximum travel times in the RL environment
    */
    virtual std::vector<real3> generateUniformPositions(std::mt19937& gen, int n) const = 0;

public:
    const real3 target {0.0_r, 0.0_r, 0.0_r}; ///< the target position
};

} // namespace rl
} // namespace msode
